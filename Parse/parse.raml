#%RAML 0.8
---
title: Parse
baseUri: https://api.parse.com/{version}
version: 1
mediaType: application/json
securitySchemes:
  - basic:
      type: Basic Authentication

  - commonSchema: !include securitySchemes/commonSchema.raml
  - sessionTokenSchema: !include securitySchemes/sessionTokenSchema.raml
  - masterSchema: !include securitySchemes/masterSchema.raml

schemas:
  - classesQuery: !include schemas/classesQuery.json
  - classPost: !include schemas/classPost.json
  - classGet: !include schemas/classGet.json
  - classPut: !include schemas/classPut.json
  - usersQuery: !include schemas/usersQuery.json
  - userPost: !include schemas/userPost.json
  - userGet: !include schemas/userGet.json
  - userPut: !include schemas/userPut.json
  - usersPostResponse: !include schemas/usersPostResponse.json
  - rolePost: !include schemas/rolePost.json
  - roleGet: !include schemas/roleGet.json
  - rolePut: !include schemas/rolePut.json
  - installationsQuery: !include schemas/installatinsQuery.json
  - installationPost: !include schemas/installatinsPost.json
  - installationGet: !include schemas/installatinsGet.json
  - installationPut: !include schemas/installatinsPut.json
  - collectionPostResponse: !include schemas/collectionPostResponse.json
  - collectionPutResponse: !include schemas/collectionPutResponse.json
  - batchPost: !include schemas/batchPost.json
  - batchResponse: !include schemas/batchResponse.json
  - fileResponse: !include schemas/fileResponse.json
  - analyticsAppOpened: !include schemas/analyticsAppOpened.json
  - analytics: !include schemas/analytics.json
  - functions: !include schemas/functions.json
  
traits:
  - allowsBasicAuthentication: !include traits/allowsBasicAuthentication.json
  - allowsQuery: !include traits/allowsQuery.json

resourceTypes:
  - collection: !include resourceTypes/collection.json
  - parseCollection: !include resourceTypes/parseCollection.json
  - parseMember: !include resourceTypes/parseMember.json

/classes:
  displayName: All Objects
    
  /{className}:
    type: parseCollection
    displayName: Class Instances
    
    get:
      description: |
        Retreives objects. The response body is a JSON object containing all the user-provided fields,
        plus the createdAt, updatedAt, and objectId fields.
        
      body:
        application/x-www-form-urlencoded:
          formParameters:
            include:
              description: Fetch child objects pointed to by the key
              example: include=game
      
      responses:
        200:
          body:
            schema: classesQuery
            example: !include examples/classesQuery.json

    post:
      description: |
        Creates an object. When the creation is successful, the HTTP response is a 201 Created
        and the Location header contains the object URL for the new object.
      
      body:
        schema: classPost
        example: !include examples/classPost.json
    
      responses:
        201:
          body:
            schema: collectionPostResponse
            example: !include examples/collectionPostResponse.json
      
    /{objectId}:
      type: {
        parseMember: {
          objectType: instance,
          schemaAndExampleGet: classGet,
          schemaAndExamplePut: classPut
        }
      }
      put:
        securedBy: [ commonSchema ]
        description: |
          Updates an object. Any keys you don't specify will remain unchanged, so you can update just a subset of the object's data.
          
/batch:
  post:
    securedBy: [ basic, commonSchema ]
    body:
      schema: batchPost
      example: !include examples/batchPost.json
      
    responses:
      200:
        schema: batchResponse
        example: !include examples/batchResponse.json

/users:
  type: parseCollection
  
  get:
    responses:
      200:
        body:
          schema: usersQuery
          example: !include examples/usersQuery.json

  post:
    description: |
      Signs up a new user.
    
    body:
      schema: userPost
      example: !include examples/userPost.json
      
    
    responses:
      201:
        body:
          schema: usersPostResponse
          example: !include examples/usersPostResponse.json
  
  /me:
    displayName: Current User
    get:
      securedBy: [ basic, sessionTokenSchema ]
      description: |
        Retrieve the user associated with the session token placed into the 'X-Parse-Session-Token' header.
        If the session token is not valid, an error object is returned.
      responses:
        200:
          body:
            schema: userGet
            example: !include examples/userGet.json
  
  /{objectId}:
    type: {
      parseMember: {
        objectType: user,
        schemaAndExampleGet: userGet,
        schemaAndExamplePut: userPut
      }
    }
    
    get:
      description: |
        Retreive a user by objectId. Response body is a JSON object containing all the user-provided fields except password.
        It also contains the createdAt, updatedAt, and objectId fields
        
    put:      
      securedBy: [ sessionTokenSchema ]
      description: |
        Updates a user. Any keys you don't specify will remain unchanged, so you can update just a subset of the object's data.

    delete:
      securedBy: [ sessionTokenSchema ]

/login:  
  get:    
    securedBy: [ basic, commonSchema ]
    description: Logs in a user to his or her account. Response provides a 'sessionToken' which is used to invoke methods with authorized access.
    
    body:
      application/x-www-form-urlencoded:
        formParameters:
          username:
            required: true
          password:
            required: true
            
    responses:
      200:
        body:
          schema: userGet
          example: !include examples/userGet.json

/requestPasswordReset:
  post:
    securedBy: [ basic, commonSchema ]
    description: Initiates password reset for a users who has email associated with his or her account.
    body:
      schema: requestPasswordReset
      example: !include examples/requestPasswordReset.json

/roles:
  type: parseCollection
  
  post:
    body:
      schema: rolePost
      example: !include examples/rolePost.json
    
    responses:
      201:
        body:
          schema: collectionPostResponse
          example: !include examples/collectionPostResponse.json
  
  /{objectId}:
    type: {
      parseMember: {
        objectType: role,
        schemaAndExampleGet: roleGet,
        schemaAndExamplePut: rolePut
      }
    }
    put:
      securedBy: [ masterSchema ]

    delete:
      securedBy: [ sessionTokenSchema, masterSchema ]
      description: Delete role. Allows both authorized and master access.
        
      headers:
        X-Parse-REST-API-Key:
          required: false
        X-Parse-Session-Token:
          required: false
        X-Parse-Master-Key:
          required: false
    
/files:
  /{fileName}:
    post:
      securedBy: [ basic, commonSchema ]
      description: |
        To upload a file to Parse, send a POST request to the files URL, postfixed with the name of the file.
        The request must contain the Content-Type header associated with the file.
        Keep in mind that files are limited to 10 megabytes
        
      body:
        "*/*":

      responses:
        201:
          body:
            schema: fileResponse
            example: !include examples/fileResponse.json|

/events:
  displayName: Analytics
  
  /AppOpened:
    displayName: App-Open Analytics
    post:
      securedBy: [ basic, commonSchema ]
      description: Starts to collect data on when and how often the application is opened.
      body:
        schema: analyticsAppOpened
        example: !include examples/analyticsAppOpened.json
      
  /{eventName}:
    displayName: Custom Analytics
    post:
      securedBy: [ basic, commonSchema ]
      body:
        schema: analytics
        example: !include examples/analytics.json
  
/push:
  displayName: Push Notifications
  post:
    securedBy: [ basic, commonSchema ]
    body:
      schema: push
      example: !include examples/push.json

/installations:
  type: parseCollection
  description: |
    An installation object represents an instance of your app being installed on a device.
    These objects are used to store subscription data for installations which have subscribed to one or more push notification channels.
    Installations have a flexible schema, except that the special fields below have special type and validation requirements:
    
    'deviceType' is a required string field that must be set to either "ios" or "android". It may not be changed once the object is created.
    
    'installationId' is a Parse-generated string identifier that is required for devices with a deviceType of "android"
    and optional for devices with a deviceType of "ios". It may not be changed once the object is created and must be unique across all
    of an app's installations.
    
    'deviceToken' is an Apple-generated string identifier that is required for devices with a deviceType of "ios".
    It may not be changed once the object is created and must be unique across all of an app's installations.
    
    'badge' is a number field representing the last known application badge for iOS installations.
    
    'timeZone' is a string field representing the system time zone of the device running this installation.
    
    'channels' is an optional array of strings representing the subscriptions of this installation object.
  
  get:
    responses:
      200:
        body:
          schema: installationsQuery
          example: !include examples/installationsQuery.json
          
  post:
    body:
      schema: installationPost
      example: !include examples/installationPost.json
    
    responses:
      201:
        body:
          schema: collectionPostResponse
          example: !include examples/collectionPostResponse.json
          
  /{objectId}:
    type: {
      parseMember: {
        objectType: installation,
        schemaAndExampleGet: installationGet,
        schemaAndExamplePut: installationPut
      }
    }

    put:
      securedBy: [ commonSchema ]

/functions:
  displayName: Cloud Functions
  description: |
    Cloud functions can be called from any of the client SDKs, as well as through the REST API
    (use the drop-down in the example below to switch SDKs).
      
  /{functionName}:  
  post:
    securedBy: [ basic, commonSchema ]
    description: Call a function.
    body:
      schema: functions
      example: !include examples/functions.json
